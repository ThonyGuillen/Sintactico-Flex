%defines "sin.tab.h"
%{
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
int yylex();
void yyerror(const char* s);
%}







%start SIMB
%token


COMENTARIOIZQ
COMENTARIODER
GUIONES
COMA
PUNTO
PUNTOCOMA
DOSPUNTOS


ID
INT
FLOAT
CADENA


OPERADORARITMETICO
OPERADORLOGICO
IGUAL


LLAVEIZQ
LLAVEDER
PARI
PARD
CORCHETEIZQ
CORCHETEDER
CONSTANTE
OPERADORLOG
DECLARACION
VERIFICACION
ESPERAR
FINALIZADORES
DEFsimbN
CONTINUAR
ELIMINADORES
CONDICIONES
SINO
CAPTURAS
SIEMPRE
BUCLE
HACER
IMPORTACION
COMPARATORES
LEVANTA
DEVUELVE
PRUEBA
METODOS
TIPO_DATO
ACCIONES
VALORFINAL
IMPLEMENTACION
INSTANCIA
CATEGORIA
MODO
LLAMADA
BLOQUE
REFERENCIA
LANZADORES
VARIABLE
CONTROLADORES
CONVERSION
FLUJO
ENTRADAS
SALIDAS
OPERACION
CLASE
DESCARTES
DIRECCIONES
MUESTRAS
FORMATO
PLANTILLA
ARCHIVOS
COMPILADOR
PUNTERO
DELEGADOS
EVENTOS
REGISTRO
ENGANCHE
HEREDAR
ESTADO
PIN
PROPIEDADES
CLONAR
PRINCIPAL
DESENGANCHE
IDENTIFICACION
RESTRICCION
DEPURACION
MODIFICADOR
ASIGNACION
CERRAR
EJECUCION
EVALUAR
SIMPLIFICAR
GESTIONAR
INICIALIZAR
OBTENER
BOOK
MEMORIA
VISUALIZACION
CADENAS
ARRAYS
ASINCRONO
MANEJO
INCLUSION
OPTIMIZACION
CONTADOR
GENERADOR
REGRESAR
AVANCE
OP
LECTURA
CONCATENACION
PARIMPAR
CASO
LONGITUD
ENTERO
PRI
ORDENAR
DEF
CARGAR
PONER




%%
SIMB : INSRR;


DEC : TIPO_DATO ID IGUAL VARID PUNTOCOMA
{ printf("INSTRUCCION DECLARACION\n"); }
    ;


OPERACION_ARITMETICA : ID IGUAL ID OPERACION_ARITMETICAR ID PUNTOCOMA
{ printf("INSTRUCCION OPERACION ARITMETICA\n"); }
    ;


IMPRESION : INCLUSION CADENA PUNTOCOMA
{ printf("INSTRUCCION IMPRESION\n"); }
    ;


NOMBRE : CONDICIONES ID OPERADORLOGICO ID DOSPUNTOS
{ printf("INSTRUCCION NOMBRE\n"); }
    ;


REAI : ID IGUAL LECTURA PARI CADENA PARD PUNTOCOMA
{ printf("INSTRUCCION LECTURA\n"); }
    ;


BOOKS : ARCHIVOS ID PUNTOCOMA
{ printf("INSTRUCCION BOOK\n"); }
    ;


CONCATENACIONINS : TIPO_DATO ID IGUAL ID CADENA ID PUNTOCOMA
{ printf("INSTRUCCION CONCATENACION\n"); }
    ;


ARREGLO : ID IGUAL BUCLE ID VERIFICACION ID INCLUSION
{ printf("INSTRUCCION ARREGLO\n"); }
    ;


MIENTRAS : ID IGUAL ID BUCLE ID ID INCLUSION PARI TIPO_DATO PARI ID PARD PARD ID ID
{ printf("INSTRUCCION MIENTRAS\n"); }
    ;


LONGITUDINS : LONGITUD ID PUNTOCOMA
{ printf("INSTRUCCION LONGITUD\n"); }
    ;


FOR : BUCLE ID VERIFICACION GENERADOR PARI PARD INCLUSION PARI ID PARD
{ printf("INSTRUCCION FOR\n"); }
    ;


OPETODO : ID IGUAL
{ printf("INSTRUCCION METODO OPERACION\n"); }
    ;


DEVUELVES : DEVUELVE ID
{ printf("INSTRUCCION DEVUELVE\n"); }
    ;


UP : LEVANTA INCLUSION CADENA PUNTOCOMA
{ printf("INSTRUCCION UP\n"); }
    ;


SINOS : ID IGUAL ID CONDICIONES ID ID INCLUSION PARI PARD SINO INCLUSION PARI PARD
{ printf("INSTRUCCION ELSE\n"); }
    ;


COMPARATOR : ID IGUAL  ID IGUAL  CONDICIONES ID ID INCLUSION PARI PARD SINO INCLUSION PARI PARD
{ printf("INSTRUCCION COMPARATOR\n"); }
    ;


WHILE : BUCLE ID RECLOGICO LLAVEIZQ LLAVEDER
{ printf("INSTRUCCION MIENTRA\n"); }
    ;


INTERIN : DECLARACION ID LLAVEIZQ CASO INT FINALIZADORES CASO INT FINALIZADORES ACCIONES FINALIZADORES LLAVEDER
{ printf("INSTRUCCION SWITCH\n"); }
    ;


DECAR : TIPO_DATO CORCHETEIZQ CORCHETEDER ID IGUAL REC PUNTOCOMA
{ printf("INSTRUCCION DECLARACION ARRAY\n"); }
    ;


CLASES : CATEGORIA DEFsimbN ID LLAVEIZQ LLAVEDER
{ printf("INSTRUCCION CLASE\n"); }
    ;


DECLARACIONMETODOS : CATEGORIA TIPO_DATO ID TIPO_DATO ID TIPO_DATO ID LLAVEIZQ DEVUELVE ID LLAVEDER
{ printf("INSTRUCCION DECLARACION METODOS\n"); }
    ;


ESTATIC : TIPO_DATO ID IGUAL ID PUNTO ID PARI ID COMA ID PARD
{ printf("INSTRUCCION DECLARACION METODOS\n"); }
    ;


OBJETO : ID ID IGUAL INSTANCIA ID PARI PARD
{ printf("INSTRUCCION DECLARACION OBJETO\n"); }
    ;


PRIINS : PRI ID PUNTOCOMA
{ printf("INSTRUCCION PRI\n"); }
    ;


ORDENINS : ORDENAR ID PUNTOCOMA
{ printf("INSTRUCCION ORDEN\n"); }
    ;


 


INSRR : INSRR INS | INS
    ;


INS : NOMBRE | WHILE | RECCOMA | RECLOGICO | DEC | OPERACION_ARITMETICA | IMPRESION | REAI | BOOKS | CONCATENACIONINS | ARREGLO| LONGITUDINS | FOR | OPETODO | DEVUELVES | UP | CLASES | SINOS | COMPARATOR | MIENTRAS | INTERIN | DECAR | DECLARACIONMETODOS | ESTATIC | OBJETO | PRIINS | ORDENINS
    ;


VARID : INT | FLOAT | CADENA
    ;


OPERACION_ARITMETICAR : OPERACION_ARITMETICAR OPERADORARITMETICO ID | OPERADORARITMETICO ID
    ;


RECCOMA : RECCOMA COMA ID | COMA ID
    ;


REC : REC ID | ID
    ;


RECLOGICO : RECLOGICO OPERADORLOGICO ID | OPERADORLOGICO ID
    ;


%%
extern int yyparse(); // Declaraci칩n de la funci칩n yyparse generada por Bison
extern FILE* yyin; // Declaraci칩n de yyin




int main(int argc, char* argv[]) {
    if (argc != 2) {
        printf("Uso: %s archivo.txt\n", argv[0]);
        return 1;
    }
   
    FILE* archivo = fopen(argv[1], "r");
    if (archivo == NULL) {
        printf("No se pudo abrir el archivo: %s\n", argv[1]);
        return 1;
    }
   
    yyin = archivo; // Asignar el archivo de entrada al puntero yyin
   
    int resultado = yyparse(); // Ejecutar el analizador sint치ctico
   
    fclose(archivo);
    return resultado;
}


void yyerror(const char* s) {
    printf("Error de sintaxis: %s\n", s);
}
